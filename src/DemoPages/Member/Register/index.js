import React, {Component, Fragment} from 'react';
import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
import {
    Col, Card, CardBody, CardFooter, CardTitle, 
    Button, Form, FormGroup, Label,  FormText, Row, 
    Input, InputGroup, FormFeedback,
    Modal, ModalHeader, ModalBody, ModalFooter
} from 'reactstrap';

import PageTitle from '../../../Layout/AppMain/PageTitle';
import { register } from "../../../actions/auth";
import { connect } from "react-redux";
import axios from "axios";

const API_URL = "http://localhost:8080/api/auth/";
const ImageFormat = ["jpg","jpeg","png","bmp","tiff","webp","bmp"]
const gambar = "";
const Example = ({ data }) => <img src={`data:image/jpg;base64,${data}`} />

class NewMember extends Component {
    constructor(props) {
        super(props);

        this.onChangeFullname = this.onChangeFullname.bind(this);
        this.onChangeNim = this.onChangeNim.bind(this);
        this.onChangeUsername = this.onChangeUsername.bind(this);
        this.onChangePassword = this.onChangePassword.bind(this);
        this.onChangeWhatsapp = this.onChangeWhatsapp.bind(this);
        this.onChangeEmail = this.onChangeEmail.bind(this);
        this.onChangeKTM = this.onChangeKTM.bind(this);
        this.onChangeSelfie = this.onChangeSelfie.bind(this);
        this.onreset = this.onreset.bind(this);
        this.toggle = this.toggle.bind(this);
        this.validAll = this.validAll.bind(this);

        this.state = {
            fullname:"",
            nim:"",
            username:"",
            password:"",
            email:"",
            whatsapp:"",
            ktm:null,
            selfie:null,

            fullnameErr:"",
            nimErr:"",
            usernameErr:"",
            passwordErr:"",
            emailErr:"",
            whatsappErr:"",
            ktmErr:"",
            selfieErr:"",
            modal:false
        };
    }

    handleSubmit = (event) => {
        event.preventDefault();
        const formData = new FormData();
        formData.append("fullname", this.state.fullname);
        formData.append("username", this.state.username);
        formData.append("email", this.state.email);
        formData.append("password", this.state.password);
        formData.append("nim", this.state.nim);
        formData.append("whatsapp", this.state.whatsapp);
        formData.append("ktm", this.state.ktm);
        formData.append("selfie", this.state.selfie);
        
        for (var pair of formData.entries()) {
            console.log(pair[0]+ ', ' + pair[1]); 
        }
        // data.fullname, data.username, data.email, data.password, data.nim, data.whatsapp, data.ktm, data.selfie;
        // this.props.dispatch(
        //   register(data.fullname, data.username, data.email, data.password, data.nim, data.whatsapp, data.ktm, data.selfie)
        // )
        // .then(() => {
        //   this.setState({
        //     successful: true,
        //   });
        // })
        // .catch(() => {
        //   this.setState({
        //     successful: false,
        //   });
        // });
        axios.post(API_URL + "signup", formData, {headers: {"Content-type": "multipart/form-data"}});

    }

    onChangeKTM(e){
        if (!e || !e.target || !e.target.files || e.target.files.length === 0) {
            this.setState({
                selfieErr:"Please select image to upload"
            });
        } else {
            const name = e.target.files[0].name;
            const lastDot = name.lastIndexOf('.');
        
            const fileName = name.substring(0, lastDot);
            const ext = name.substring(lastDot + 1);

            if(!ImageFormat.includes(ext.toLowerCase())){
                this.setState({
                    ktmErr:"Only image file allowed"
                });
            } else {
                this.setState({
                    ktm:e.target.files[0],
                    ktmErr:""
                })
            }
        }
    }
    
    onChangeSelfie(e){
        if (!e || !e.target || !e.target.files || e.target.files.length === 0) {
            this.setState({
                selfieErr:"Please select image to upload"
            });
        } else {
            const name = e.target.files[0].name;
            const lastDot = name.lastIndexOf('.');
        
            const fileName = name.substring(0, lastDot);
            const ext = name.substring(lastDot + 1);

            if(!ImageFormat.includes(ext.toLowerCase())){
                this.setState({
                    selfieErr:"Only image file allowed"
                });
            } else {
                this.setState({
                    selfie:e.target.files[0],
                    selfieErr:""
                });
            }
        }
    }

    onChangeFullname(e) {
        this.setState({
            fullname: e.target.value,
        });
        if(e.target.value.length<3) this.state.fullnameErr= "Must be at least 4 characters";
        else if(e.target.value.length>149) this.state.fullnameErr= "Maximum 150 characters";
        else this.state.fullnameErr= "";
    }

    onChangeNim(e) {
        if(!isNaN(e.target.value) && e.target.value.length <=9){
            this.setState({nim: e.target.value,});
        } 
        if(e.target.value.length<=8) this.state.nimErr= "Must be 9 digits";
        else this.state.nimErr= "";
    }

    onChangeEmail(e) {
        this.setState({
            email: e.target.value,
        });
        if(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-][a-zA-Z0-9-]+\.[a-zA-Z0-9-][a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-][a-zA-Z0-9-]+)*$/.test(e.target.value))
            this.state.emailErr=""
        else this.state.emailErr="Email is invalid"
        console.log(gambar)
    }

    onChangeUsername(e) {
        this.setState({
            username: e.target.value,
        });
        if(e.target.value.length<3) this.state.usernameErr= "Must be at least 4 characters";
        else if(e.target.value.length>149) this.state.usernameErr= "Maximum 150 characters";
        else this.state.usernameErr= "";
    }

    onChangePassword(e) {
        this.setState({
            password: e.target.value,
        });
        if(e.target.value.length<7) this.state.passwordErr= "Must be at least 8 characters";
        else if(e.target.value.length>150) this.state.passwordErr= "Maximum 150 characters";
        else this.state.passwordErr= "";
    }

    onChangeWhatsapp(e) {
        if(!isNaN(e.target.value) && e.target.value.length <=13){
            this.setState({whatsapp: e.target.value,});
        } 
        if(e.target.value.length<=7) this.state.whatsappErr= "Minimum is 8 digits, maximum is 13 digits (without zero)";
        else this.state.whatsappErr= "";
        if(e.target.value.charAt(0)=="0") this.state.whatsappErr= "Please insert without leading zero";
    }

    onreset = () => {
        this.setState({
            fullname:"",
            nim:"",
            username:"",
            password:"",
            email:"",
            whatsapp:"",
            ktm:"",
            selfie:"",

            fullnameErr:"",
            nimErr:"",
            usernameErr:"",
            passwordErr:"",
            emailErr:"",
            whatsappErr:"",
            ktmErr:"",
            selfieErr:"",
            valid:false
        });
    }

    toggle() {
        this.setState({
            modal: !this.state.modal
        });
    }

    componentDidMount() {
        window.addEventListener('load', this.toggle);
        window.addEventListener('load', this.reset);
        axios.get("http://localhost:8080/photos/5f9a5d113ee7741428ca65b1")
        .then((response) => {
            console.log(response.data.image.data);
            // console.log(response.status);
            // console.log(response.statusText);
            // console.log(response.headers);
            // console.log(response.config);
            this.gambar = response.data.image.data
        });
    }

    validAll() {
        console.log("mulai")
        console.log(this.state.fullnameErr)
        console.log(this.state.usernameErr)
        console.log(this.state.emailErr)
        console.log(this.state.passwordErr)
        console.log(this.state.nimErr)
        console.log(this.state.whatsappErr)
        console.log(this.state.ktmErr)
        console.log(this.state.selfieErr)
        console.log("selesai")
        return (
            this.state.fullnameErr == "" && 
            this.state.usernameErr == "" && 
            this.state.emailErr == "" && 
            this.state.passwordErr == "" && 
            this.state.nimErr == "" && 
            this.state.whatsappErr == "" && 
            this.state.ktmErr == "" && 
            this.state.selfieErr == ""
        )
    }

    render() {
        const { message } = this.props;

        return (     
            <Fragment>
                <ReactCSSTransitionGroup
                    component="div"
                    transitionName="TabsAnimation"
                    transitionAppear={true}
                    transitionAppearTimeout={0}
                    transitionEnter={false}
                    transitionLeave={false}>
                    <div>
                        <PageTitle
                            heading="Registration"
                            subheading="Become a member at FabLab!"
                            icon="pe-7s-plus dark"
                        />
                        <Example data={gambar}/>

                        <span className="d-inline-block mb-2 mr-2">
                            <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>
                                <ModalHeader toggle={this.toggle}>Informasi</ModalHeader>
                                <ModalBody>
                                    Untuk saat ini, pendaftaran member FabLab hanya berlaku bagi Mahasiswa Aktif Politeknik Negeri Bandung. <br/><br/>
                                    <i>Currently, FabLab members registration is only available for active students at the Bandung State Polytechnic.</i>
                                </ModalBody>
                                <ModalFooter>
                                    {/* <Button color="link" onClick={this.toggle}>Cancel</Button> */}
                                    <Button color="link" onClick={this.toggle}>Okey</Button>{' '}
                                </ModalFooter>
                            </Modal>
                        </span>

                        <Card className="main-card mb-3 pl-3 m-auto">
                            <CardBody>
                                <CardTitle></CardTitle>
                                <h5><strong>Registration Form</strong></h5> 
                                <hr/><br/>
                                <Form id="form-regist" onSubmit={this.handleSubmit}>
                                    {/* Nama */}
                                    <FormGroup row>
                                        <Label for="fullname" sm={3}>Fullname</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="text" name="fullname" id="fullname"
                                            value={this.state.fullname}
                                            onChange = {this.onChangeFullname}
                                            invalid = {this.state.fullnameErr != ""}/>
                                            <FormFeedback>{this.state.fullnameErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* NIM */}
                                    <FormGroup row>
                                        <Label for="nim" sm={3}>NIM</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="text" name="nim" id="nim"
                                            value={this.state.nim}
                                            onChange={this.onChangeNim}
                                            invalid={this.state.nimErr!=""}/>
                                            <FormFeedback>{this.state.nimErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* Email */}
                                    <FormGroup row>
                                        <Label for="email" sm={3}>Email</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="email" name="email" id="email"
                                            value={this.state.email}
                                            onChange={this.onChangeEmail}
                                            invalid={this.state.emailErr!=""}/>
                                            <FormFeedback invalid>{this.state.emailErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* Phone */}
                                    <FormGroup row>
                                        <Label for="whatsapp" sm={3}>WhatsApp</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="text" name="whatsapp" id="whatsapp"
                                            value={this.state.whatsapp}
                                            onChange={this.onChangeWhatsapp}
                                            invalid={this.state.whatsappErr!=""}/>
                                            <FormFeedback>{this.state.whatsappErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* Username */}
                                    <FormGroup row>
                                        <Label for="username" sm={3}>Username</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="text" name="username" id="username"
                                            placeholder="username"
                                            value={this.state.username}
                                            onChange={this.onChangeUsername}
                                            invalid={this.state.usernameErr!=""}/>
                                            <FormFeedback invalid>{this.state.usernameErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* NIM */}
                                    <FormGroup row>
                                        <Label for="password" sm={3}>Password</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="password" name="password" id="password"
                                                placeholder="password"
                                                value={this.state.password}
                                                onChange={this.onChangePassword}
                                                invalid={this.state.passwordErr!=""}/>
                                            <FormFeedback invalid>{this.state.passwordErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* Foto KTM */}
                                    <FormGroup row>
                                        <Label for="ktm" sm={3}>KTM/KTP</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="file" name="ktm" id="ktm"
                                            accept=".jpg, .jpeg, .png, .gif, .bmp"
                                            onChange={this.onChangeKTM}
                                            accept="images/*"
                                            invalid/>
                                            <FormText color="muted">
                                                Please upload picture of your Identification Card (JPG, PNG, GIF, BMP)
                                            </FormText>
                                            <FormFeedback>{this.state.ktmErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>

                                    {/* Foto muka dan KTM */}
                                    <FormGroup row>
                                        <Label for="selfie" sm={3}>Selfie photo with KTM/KTP</Label>
                                        <Col sm={9} md={5}>
                                            <Input type="file" name="selfie" id="selfie"
                                            accept="images/*"
                                            onChange={this.onChangeSelfie}
                                            invalid/>
                                            <FormText color="muted">
                                            Please upload picture of you holding your Identification Card (JPG, PNG, GIF, BMP)
                                            </FormText>
                                            <FormFeedback>{this.state.selfieErr}</FormFeedback>
                                        </Col>
                                    </FormGroup>
                                    <hr/>
                                    <Row>
                                        <Col sm={10}>
                                            <Button size="sm" className="text-danger" color="link" href="/">Cancel</Button>
                                            <Button size="sm" className="text-primary" color="link" onClick={this.onreset}>Clear All</Button>
                                        </Col>
                                        <Col sm={2} className="btn-actions-pane-right">
                                            <Button size="lg" color="success" disabled={
                                                !(this.state.fullnameErr == "" && 
                                                this.state.usernameErr == "" && 
                                                this.state.emailErr == "" && 
                                                this.state.passwordErr == "" && 
                                                this.state.nimErr == "" && 
                                                this.state.whatsappErr == "" && 
                                                this.state.ktmErr == "" && 
                                                this.state.selfieErr == "") 
                                                || 
                                                (this.state.fullname == "" ||
                                                this.state.username == "" || 
                                                this.state.email == "" || 
                                                this.state.password == "" || 
                                                this.state.nim == "" || 
                                                this.state.whatsapp == "" || 
                                                this.state.ktm == null || this.state.selfie == null
                                                )
                                            }>Send</Button>
                                        </Col>
                                    </Row>
                                </Form>
                            </CardBody>
                            <CardFooter>
                                
                            </CardFooter>
                        </Card>
                    </div>
                </ReactCSSTransitionGroup>
            </Fragment>    
        );
    }
}

function mapStateToProps(state) {
    const { message } = state.message;
    return {
      message,
    };
}
  
export default connect(mapStateToProps)(NewMember);